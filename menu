!/bin/bash

# Function to add record to text file
addRecord() {
	echo "Please fill out the following fields of information:"
	echo "NOTE: Do not use colons(:) in any of the data entries"
	read -p 'Name: ' userName
	read -p 'Address: ' userAddress
	read -p 'Phone: ' userPhone
	read -p 'Email: ' userEmail

	echo $userName:$userAddress:$userPhone:$userEmail >> database.txt
}

# Print is used to read contents of input file. 
print() {
	IFS=":"
	echo "Name\t\tAddress\t\tPhone\t\tEmail"
	while read name address phone email;
	do
		echo "$name\t$address\t$phone\t$email"
	done <database.txt
}

#Function finds one or more records in database
find(){
DATABASE="database.txt"

echo "Enter a record to find: "
read input

RECORD=$(grep -i $input $DATABASE)

for line in "$RECORD"
do
	if [ $? == 1 ]; #a '1' indicates that no matches were found
	then
		echo "Could not find the requested record"
	else
		echo "Found the requested record: $line"
	fi
done
}

# Function updates record user
update(){
read -p "Please enter the first and last name on the file you wish to change: " firstName
lnNmbr=$(grep -c "^$firstName" ./database.txt)
grep "^$firstName" ./database.txt > ./dataTemp

counter=1
IFS=":"
echo "Ct\tName\t\tAddress\t\tPhone\t\tEmail"
while read name address phone email;
	do
	echo "$counter\t$name\t$address\t$phone\t$email"
	counter=$((counter+1))
done <dataTemp

if [ $lnNmbr -ge 1 ]
	then 
	touch dataTemp
	read -p "Input the line number of the data you wish to update: " lineNumber
	holder="head -n "$lineNumber" ./dataTemp | tail -n "\+$lineNumber" "
	firstName=$(eval $holder)
	rm dataTemp
else
	echo "We were not able to locate your record please check database to ensure it exist."
fi

read -p "Are you ready to update data?(y/n)" data
if [ "$data" = "y" ] || [ "$data" = "Y" ]
	then grep -v "^$firstName" ./database.txt > ./dataBaseHolder
	echo "Note do not use colon ':' in entries."
	read -p "Enter first and last name: " newName
	read -p "Enter address: " newAdd
	read -p "Enter phone: " newPhone
	read -p "Enter email: " newEmail
	echo "$newName:$newAdd:$newPhone:$newEmail" >> ./dataBaseHolder
	mv ./dataBaseHolder ./database.txt
else
	echo "Please start over."
	upDate
fi

}

Remove() {
DATABASE="database.txt" 

echo "Enter the data you want to find (any aspect of the record): " 
read data 

RECORDCOUNT=$(grep -c $data $DATABASE) #This counts the occurence of the searched data in the database.txt
RECORDSTRING=$(grep -i $data $DATABASE) #Holds entire line (grep -i finds what you search for)

if [ $? == 0 ]; # $? returns the exit status of the previous command (grep -i), 
then   #0 means command worked and found the record from the user input
	if [ "$RECORDCOUNT" -ne 1 ]; #means that there is more then one record(not equal to one occurence in database)
	then 
		echo "You have $RECORD of $RECORDSTRING"
		echo "You have multiple records, do you want to delete them(y or n): "
		read answer 
			if [ "$answer" == "y" ] || [ "$answer" == "Y" ];
			then
				grep -v "$RECORDSTRING" $DATABASE > junkfile.txt 
				mv junkfile.txt $DATABASE
				echo "delted all records"		
	 		else
	 		echo "Duplicate variable, search a different field" 
	 		fi
	else 	
	echo "Record Exists- $RECORDSTRING" 
	echo "Deleting the line from the database... "
	grep -v "$RECORDSTRING" $DATABASE > junkfile.txt 
	mv junkfile.txt $DATABASE 
	fi
else 
echo "the record does not exist"
fi

}


# Interative menu 
menu(){
echo "Welcome to my contact database, please select in the following menu:"
echo "(a) Find a record"
echo "(b) Add a new record"
echo "(c) Update a record"
echo "(d) Remove a record"
echo "(e) Display Contacts"
echo "(f) Quit"
echo "> Selection is:"

while :
do 
   read input
   case $input in 
      [aA])
         #call find record function
	 find
         break ;;
      [bB])
         #call Add new record function
         addRecord
         break ;;
      [cC])
         #call Update record function
	 update
         break ;;
      [dD])
         #call Remove record function
         Remove
         break ;;
      [eE])
      	 #call print function
	 print
	 break;;
      [fF])
         echo "Thank you! Goodbye"
         exit ;; 
      *)
         echo "Sorry that isn't an option, select again.";;
   esac
done 
}
touch database.txt::
answer=1
while [ $answer -eq 1 ] 
do 
   menu
   echo "Would you like to select again(y/n)?"
   while :
   do   
      read response
      case $response in
         [yY]) answer=1 
            break ;;
         [nN]) answer=0 
            break ;;
         *) echo "Invalid response please enter again."
      esac
   done
done
echo "Thank you! Goodbye"
